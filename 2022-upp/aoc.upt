template "Advent of Code U++ Core console" main;

@@<:PACKAGE:>.cpp
#include <Core/Core.h>

using namespace Upp;

// concept of part1/part2 task having init/line(line)/finish interface
template <typename T>
concept TaskProcessingLines = requires(T task, const String & line) {
	task.init();
	{ task.line(line) } -> std::same_as<bool>;	// return true finished early
	task.finish();
};

// main loop reading lines from input file feeding them to task
template <typename T>
requires TaskProcessingLines<T>
void lines_loop(T task, const String & filename) {
	FileIn in(GetDataFile(filename));
	if (!in) return;
	task.init();
	Cout() << " input filename: " << filename << EOL;
	while (!task.line(in.GetLine()) && !in.IsEof()) ;
	task.finish();
}

class Part1 {

public:

	void init() { Cout() << "part1"; }

	bool line(const String & line) {
		return false;							// not finished yet, try next line
	}

	void finish() { Cout() << "part1: " << 0 << EOL; }
};

class Part2 {

public:

	void init() { Cout() << "part2"; }

	bool line(const String & line) {
		return false;							// not finished yet, try next line
	}

	void finish() { Cout() << "part2: " << 0 << EOL; }
};

CONSOLE_APP_MAIN
{
	const Vector<String>& cmdline = CommandLine();
	for(int i = 0; i < cmdline.GetCount(); i++) {
		lines_loop(Part1(), cmdline[i]);
		lines_loop(Part2(), cmdline[i]);
	}
}
@@<:PACKAGE:>.upp
uses Core;

file
	<:PACKAGE:>.cpp,
	sample.txt,
	input.txt,
	<:PACKAGE:>.upp;

mainconfig
	"" = "";
@@sample.txt
@@input.txt
